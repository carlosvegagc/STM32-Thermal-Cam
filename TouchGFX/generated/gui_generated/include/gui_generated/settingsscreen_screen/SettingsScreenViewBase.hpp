/*********************************************************************************/
/********** THIS FILE IS GENERATED BY TOUCHGFX DESIGNER, DO NOT MODIFY ***********/
/*********************************************************************************/
#ifndef SETTINGSSCREENVIEWBASE_HPP
#define SETTINGSSCREENVIEWBASE_HPP

#include <gui/common/FrontendApplication.hpp>
#include <mvp/View.hpp>
#include <gui/settingsscreen_screen/SettingsScreenPresenter.hpp>
#include <touchgfx/widgets/Box.hpp>
#include <touchgfx/widgets/TiledImage.hpp>
#include <touchgfx/containers/buttons/Buttons.hpp>
#include <gui/containers/TopBar.hpp>
#include <touchgfx/widgets/TextArea.hpp>
#include <touchgfx/widgets/TextAreaWithWildcard.hpp>

class SettingsScreenViewBase : public touchgfx::View<SettingsScreenPresenter>
{
public:
    SettingsScreenViewBase();
    virtual ~SettingsScreenViewBase() {}
    virtual void setupScreen();

    /*
     * Virtual Action Handlers
     */
    virtual void handle_Add_FrameRate()
    {
        // Override and implement this function in SettingsScreen
    }

    virtual void handle_Add_MaxTemp()
    {
        // Override and implement this function in SettingsScreen
    }

    virtual void handle_Add_MinTemp()
    {
        // Override and implement this function in SettingsScreen
    }

    virtual void handle_Min_FrameRate()
    {
        // Override and implement this function in SettingsScreen
    }

    virtual void handle_Min_MaxTemp()
    {
        // Override and implement this function in SettingsScreen
    }

    virtual void handle_Min_MinTemp()
    {
        // Override and implement this function in SettingsScreen
    }

protected:
    FrontendApplication& application() {
        return *static_cast<FrontendApplication*>(touchgfx::Application::getInstance());
    }

    /*
     * Member Declarations
     */
    touchgfx::Box __background;
    touchgfx::TiledImage background;
    touchgfx::Box box1;
    touchgfx::Box box1_1;
    touchgfx::Box box1_2;
    touchgfx::Box box1_2_1;
    touchgfx::IconButtonStyle< touchgfx::ClickButtonTrigger > button_home;
    TopBar top_bar;
    touchgfx::IconButtonStyle< touchgfx::ClickButtonTrigger > b_min_FrameRate;
    touchgfx::IconButtonStyle< touchgfx::ClickButtonTrigger > b_Add_FrameRate;
    touchgfx::TextArea textArea1;
    touchgfx::TextAreaWithOneWildcard textFPS;
    touchgfx::IconButtonStyle< touchgfx::ClickButtonTrigger > b_Min_MaxTemp;
    touchgfx::IconButtonStyle< touchgfx::ClickButtonTrigger > b_Add_MaxTemp;
    touchgfx::TextArea textArea1_1;
    touchgfx::TextAreaWithOneWildcard textMaxTemp;
    touchgfx::IconButtonStyle< touchgfx::ClickButtonTrigger > b_Min_MinTemp;
    touchgfx::IconButtonStyle< touchgfx::ClickButtonTrigger > b_Add_MinTemp;
    touchgfx::TextArea textArea1_1_1;
    touchgfx::TextAreaWithOneWildcard textMinTemp;

    /*
     * Wildcard Buffers
     */
    static const uint16_t TEXTFPS_SIZE = 5;
    touchgfx::Unicode::UnicodeChar textFPSBuffer[TEXTFPS_SIZE];
    static const uint16_t TEXTMAXTEMP_SIZE = 5;
    touchgfx::Unicode::UnicodeChar textMaxTempBuffer[TEXTMAXTEMP_SIZE];
    static const uint16_t TEXTMINTEMP_SIZE = 5;
    touchgfx::Unicode::UnicodeChar textMinTempBuffer[TEXTMINTEMP_SIZE];

private:

    /*
     * Callback Declarations
     */
    touchgfx::Callback<SettingsScreenViewBase, const touchgfx::AbstractButtonContainer&> flexButtonCallback;

    /*
     * Callback Handler Declarations
     */
    void flexButtonCallbackHandler(const touchgfx::AbstractButtonContainer& src);

};

#endif // SETTINGSSCREENVIEWBASE_HPP
