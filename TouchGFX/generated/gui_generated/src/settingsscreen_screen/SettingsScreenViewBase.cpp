/*********************************************************************************/
/********** THIS FILE IS GENERATED BY TOUCHGFX DESIGNER, DO NOT MODIFY ***********/
/*********************************************************************************/
#include <gui_generated/settingsscreen_screen/SettingsScreenViewBase.hpp>
#include <touchgfx/Color.hpp>
#include "BitmapDatabase.hpp"
#include <texts/TextKeysAndLanguages.hpp>

SettingsScreenViewBase::SettingsScreenViewBase() :
    flexButtonCallback(this, &SettingsScreenViewBase::flexButtonCallbackHandler)
{

    __background.setPosition(0, 0, 240, 320);
    __background.setColor(touchgfx::Color::getColorFrom24BitRGB(0, 0, 0));

    background.setBitmap(touchgfx::Bitmap(BITMAP_BLUE_TEXTURES_CARBON_FIBRE_ID));
    background.setPosition(0, 0, 240, 320);
    background.setOffset(0, 0);

    box1.setPosition(15, 44, 211, 49);
    box1.setColor(touchgfx::Color::getColorFrom24BitRGB(255, 255, 255));

    box1_1.setPosition(0, 263, 240, 57);
    box1_1.setColor(touchgfx::Color::getColorFrom24BitRGB(255, 255, 255));

    box1_2.setPosition(15, 100, 211, 49);
    box1_2.setColor(touchgfx::Color::getColorFrom24BitRGB(255, 255, 255));

    box1_2_1.setPosition(15, 157, 211, 49);
    box1_2_1.setColor(touchgfx::Color::getColorFrom24BitRGB(255, 255, 255));

    button_home.setIconBitmaps(Bitmap(BITMAP_BLUE_ICONS_HOME_32_ID), Bitmap(BITMAP_BLUE_ICONS_HOME_32_ID));
    button_home.setIconXY(7, 5);
    button_home.setPosition(15, 271, 44, 40);
    button_home.setAction(flexButtonCallback);

    top_bar.setXY(1, 0);

    b_min_FrameRate.setIconBitmaps(Bitmap(BITMAP_REMOVE_CIRCLE_OUTLINE_32PX_ID), Bitmap(BITMAP_REMOVE_CIRCLE_OUTLINE_32PX_ID));
    b_min_FrameRate.setIconXY(0, 0);
    b_min_FrameRate.setPosition(21, 52, 32, 33);
    b_min_FrameRate.setAction(flexButtonCallback);

    b_Add_FrameRate.setIconBitmaps(Bitmap(BITMAP_ADD_CIRCLE_OUTLINE_32PX_ID), Bitmap(BITMAP_ADD_CIRCLE_OUTLINE_32PX_ID));
    b_Add_FrameRate.setIconXY(0, 0);
    b_Add_FrameRate.setPosition(186, 52, 32, 33);
    b_Add_FrameRate.setAction(flexButtonCallback);

    textArea1.setXY(68, 51);
    textArea1.setColor(touchgfx::Color::getColorFrom24BitRGB(0, 0, 0));
    textArea1.setLinespacing(0);
    textArea1.setTypedText(touchgfx::TypedText(T_SINGLEUSEID8));

    textFPS.setXY(85, 64);
    textFPS.setColor(touchgfx::Color::getColorFrom24BitRGB(0, 0, 0));
    textFPS.setLinespacing(0);
    Unicode::snprintf(textFPSBuffer, TEXTFPS_SIZE, "%s", touchgfx::TypedText(T_SINGLEUSEID21).getText());
    textFPS.setWildcard(textFPSBuffer);
    textFPS.resizeToCurrentText();
    textFPS.setTypedText(touchgfx::TypedText(T_SINGLEUSEID9));

    b_Min_MaxTemp.setIconBitmaps(Bitmap(BITMAP_REMOVE_CIRCLE_OUTLINE_32PX_ID), Bitmap(BITMAP_REMOVE_CIRCLE_OUTLINE_32PX_ID));
    b_Min_MaxTemp.setIconXY(0, 0);
    b_Min_MaxTemp.setPosition(21, 108, 32, 33);
    b_Min_MaxTemp.setAction(flexButtonCallback);

    b_Add_MaxTemp.setIconBitmaps(Bitmap(BITMAP_ADD_CIRCLE_OUTLINE_32PX_ID), Bitmap(BITMAP_ADD_CIRCLE_OUTLINE_32PX_ID));
    b_Add_MaxTemp.setIconXY(0, 0);
    b_Add_MaxTemp.setPosition(186, 108, 32, 33);
    b_Add_MaxTemp.setAction(flexButtonCallback);

    textArea1_1.setXY(65, 107);
    textArea1_1.setColor(touchgfx::Color::getColorFrom24BitRGB(0, 0, 0));
    textArea1_1.setLinespacing(0);
    textArea1_1.setTypedText(touchgfx::TypedText(T_SINGLEUSEID14));

    textMaxTemp.setXY(104, 120);
    textMaxTemp.setColor(touchgfx::Color::getColorFrom24BitRGB(0, 0, 0));
    textMaxTemp.setLinespacing(0);
    Unicode::snprintf(textMaxTempBuffer, TEXTMAXTEMP_SIZE, "%s", touchgfx::TypedText(T_SINGLEUSEID20).getText());
    textMaxTemp.setWildcard(textMaxTempBuffer);
    textMaxTemp.resizeToCurrentText();
    textMaxTemp.setTypedText(touchgfx::TypedText(T_SINGLEUSEID15));

    b_Min_MinTemp.setIconBitmaps(Bitmap(BITMAP_REMOVE_CIRCLE_OUTLINE_32PX_ID), Bitmap(BITMAP_REMOVE_CIRCLE_OUTLINE_32PX_ID));
    b_Min_MinTemp.setIconXY(0, 0);
    b_Min_MinTemp.setPosition(21, 165, 32, 33);
    b_Min_MinTemp.setAction(flexButtonCallback);

    b_Add_MinTemp.setIconBitmaps(Bitmap(BITMAP_ADD_CIRCLE_OUTLINE_32PX_ID), Bitmap(BITMAP_ADD_CIRCLE_OUTLINE_32PX_ID));
    b_Add_MinTemp.setIconXY(0, 0);
    b_Add_MinTemp.setPosition(186, 165, 32, 33);
    b_Add_MinTemp.setAction(flexButtonCallback);

    textArea1_1_1.setXY(64, 164);
    textArea1_1_1.setColor(touchgfx::Color::getColorFrom24BitRGB(0, 0, 0));
    textArea1_1_1.setLinespacing(0);
    textArea1_1_1.setTypedText(touchgfx::TypedText(T_SINGLEUSEID17));

    textMinTemp.setXY(104, 177);
    textMinTemp.setColor(touchgfx::Color::getColorFrom24BitRGB(0, 0, 0));
    textMinTemp.setLinespacing(0);
    Unicode::snprintf(textMinTempBuffer, TEXTMINTEMP_SIZE, "%s", touchgfx::TypedText(T_SINGLEUSEID19).getText());
    textMinTemp.setWildcard(textMinTempBuffer);
    textMinTemp.resizeToCurrentText();
    textMinTemp.setTypedText(touchgfx::TypedText(T_SINGLEUSEID18));

    add(__background);
    add(background);
    add(box1);
    add(box1_1);
    add(box1_2);
    add(box1_2_1);
    add(button_home);
    add(top_bar);
    add(b_min_FrameRate);
    add(b_Add_FrameRate);
    add(textArea1);
    add(textFPS);
    add(b_Min_MaxTemp);
    add(b_Add_MaxTemp);
    add(textArea1_1);
    add(textMaxTemp);
    add(b_Min_MinTemp);
    add(b_Add_MinTemp);
    add(textArea1_1_1);
    add(textMinTemp);
}

void SettingsScreenViewBase::setupScreen()
{
    top_bar.initialize();
}

void SettingsScreenViewBase::flexButtonCallbackHandler(const touchgfx::AbstractButtonContainer& src)
{
    if (&src == &button_home)
    {
        //InteractionGoHome
        //When button_home clicked change screen to MainScreen
        //Go to MainScreen with block transition
        application().gotoMainScreenScreenBlockTransition();
    }
    else if (&src == &b_min_FrameRate)
    {
        //Interaction_Min_FrameRate
        //When b_min_FrameRate clicked call virtual function
        //Call handle_Min_FrameRate
        handle_Min_FrameRate();
    }
    else if (&src == &b_Add_FrameRate)
    {
        //Interaction_Add_FrameRate
        //When b_Add_FrameRate clicked call virtual function
        //Call handle_Add_FrameRate
        handle_Add_FrameRate();
    }
    else if (&src == &b_Min_MaxTemp)
    {
        //Interaction_Min_MaxTemp
        //When b_Min_MaxTemp clicked call virtual function
        //Call handle_Min_MaxTemp
        handle_Min_MaxTemp();
    }
    else if (&src == &b_Add_MaxTemp)
    {
        //Interaction_Add_MaxTemp
        //When b_Add_MaxTemp clicked call virtual function
        //Call handle_Add_MaxTemp
        handle_Add_MaxTemp();
    }
    else if (&src == &b_Min_MinTemp)
    {
        //Interaction_Min_MinTemp
        //When b_Min_MinTemp clicked call virtual function
        //Call handle_Min_MinTemp
        handle_Min_MinTemp();
    }
    else if (&src == &b_Add_MinTemp)
    {
        //Interaction_Add_MinTemp
        //When b_Add_MinTemp clicked call virtual function
        //Call handle_Add_MinTemp
        handle_Add_MinTemp();
    }
}
